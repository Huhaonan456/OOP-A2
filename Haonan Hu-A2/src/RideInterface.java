import java.util.Queue;

/**
 * RideInterface 接口定义了游乐设施相关的操作方法集合，
 * 实现该接口的类需要按照接口规定的方法签名来实现具体的业务逻辑，
 * 以此提供统一的游乐设施操作功能。
 */
public interface RideInterface {

    /**
     * 将游客添加到等待队列的方法。
     * 此方法用于把一个游客对象添加到游乐设施对应的等待队列中，
     * 使得游客进入排队等待乘坐游乐设施的状态。
     *
     * @param visitor 要添加到等待队列的游客对象，该对象不能为 null，否则可能无法正确添加到队列。
     */
    void addVisitorToQueue(Visitor visitor);

    /**
     * 从等待队列中移除游客的方法。
     * 该方法会从游乐设施的等待队列中移除一个游客，通常是移除队首的游客，
     * 用于模拟游客完成排队或者离开队列等情况。如果等待队列为空，则不执行实际移除操作。
     */
    void removeVisitorFromQueue();

    /**
     * 打印等待队列中的游客信息的方法。
     * 用于输出当前等待队列里所有游客的详细信息，方便查看排队游客的情况，
     * 信息内容可包含游客的姓名、年龄、性别、门票类型等（具体取决于 Visitor 类的定义）。
     */
    void printQueue();

    /**
     * 运行一次游乐设施循环的方法。
     * 此方法负责执行一次游乐设施完整的运行操作流程，具体包括但不限于：
     * 检查操作员是否已设置、等待队列是否有游客等前置条件，
     * 从等待队列中选取合适数量的游客（根据最大承载量和实际排队人数确定），
     * 运行游乐设施并将选取的游客添加到乘坐历史记录中，同时更新游乐设施的运行次数等相关状态信息。
     */
    void runOneCycle();

    /**
     * 将游客添加到乘坐历史记录的方法。
     * 用于把指定的游客对象添加到游乐设施的乘坐历史记录中，
     * 以此记录哪些游客已经乘坐过该游乐设施，便于后续查询、统计等操作。
     *
     * @param visitor 要添加到乘坐历史记录的游客对象，同样不能为 null，否则可能无法正确添加。
     */
    void addVisitorToHistory(Visitor visitor);

    /**
     * 检查游客是否在乘坐历史记录中的方法。
     * 接收一个游客对象作为参数，通过内部逻辑判断该游客是否已经存在于游乐设施的乘坐历史记录里，
     * 最终返回一个布尔值来表示判断结果，true 表示游客在乘坐历史记录中，false 表示不在。
     *
     * @param visitor 要检查的游客对象，必须是有效的游客对象实例。
     * @return true 如果游客在乘坐历史记录中；false 如果游客不在乘坐历史记录中。
     */
    boolean checkVisitorFromHistory(Visitor visitor);

    /**
     * 获取乘坐历史记录中的游客数量的方法。
     * 该方法返回一个整数，表示当前游乐设施乘坐历史记录里所包含的游客数量，
     * 可用于统计已经乘坐过该游乐设施的游客总数情况。
     *
     * @return 乘坐历史记录中的游客数量，为一个大于等于 0 的整数。
     */
    int numberOfVisitors();

    /**
     * 打印乘坐历史记录中的游客信息的方法。
     * 用于输出游乐设施乘坐历史记录里所有游客的详细信息，
     * 例如游客的姓名、年龄、性别、门票类型等（取决于 Visitor 类的定义），
     * 方便查看历史乘坐情况以及进行数据分析等操作。
     */
    void printRideHistory();
}
